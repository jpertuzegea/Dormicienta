
-- creacion d ela tabla para auenteicacion de usuarios
IF EXISTS(	SELECT 1
			FROM SYS.objects O
			WHERE O.NAME='USERS_INTEGRATIONS_WEB_API'
		 )
	BEGIN
		DROP TABLE UU.USERS_INTEGRATIONS_WEB_API
	END
GO
CREATE TABLE UU.USERS_INTEGRATIONS_WEB_API( 
ID int  NOT NULL IDENTITY(1,1),
FIRST_NAME_USER VARCHAR (255),
LAST_NAME_USER VARCHAR(60),
NAME_USER VARCHAR(60),
PASSWORD_USER VARCHAR(60),
ROLE_USER VARCHAR(60),
TOKEN_USER VARCHAR(255),
TOKEN_REFRESH_USER VARCHAR(255),
primary key(ID)
)
GO

-- creacion de procedimiento almacenado para listar los usuarios parametrizados
IF EXISTS(	SELECT 1
			FROM SYS.objects O
			WHERE O.NAME='SP_LIST_USERS_INTEGRATION_WEB_API'
		 )
	BEGIN
		DROP PROCEDURE SP_LIST_USERS_INTEGRATION_WEB_API
	END
GO
CREATE PROCEDURE SP_LIST_USERS_INTEGRATION_WEB_API
AS
/*
AUTOR: Jorge David Pertuz Egea
FECHA: 09/Mayo/2019
MOTIVO: Prueba concepto servicios rest a partir de Soap [autenticacion de usuarios WebApi]
*/
BEGIN
	SELECT	ID,
			FIRST_NAME_USER,
			LAST_NAME_USER,
			NAME_USER,
			PASSWORD_USER,
			ROLE_USER,
			TOKEN_USER,
			TOKEN_REFRESH_USER  
	FROM UU.USERS_INTEGRATIONS_WEB_API
END
GO

 
 -- creacion de procedimiento almacenado para actualizar el token y tokenRefresh de los usuarios parametrizados
IF EXISTS(	SELECT 1
			FROM SYS.objects O
			WHERE O.NAME='SP_UPDATE_USERS_INTEGRATION_WEB_API_TOKEN'
		 )
	BEGIN
		DROP PROCEDURE SP_UPDATE_USERS_INTEGRATION_WEB_API_TOKEN
	END
GO
CREATE PROCEDURE SP_UPDATE_USERS_INTEGRATION_WEB_API_TOKEN
(
@PI_ID INT,
@PI_TOKEN_USER VARCHAR(255),
@PI_TOKEN_REFRESH_USER VARCHAR(255)
)
AS
/*
AUTOR: Jorge David Pertuz Egea
FECHA: 09/Mayo/2019
MOTIVO: Prueba concepto servicios rest a partir de Soap [autenticacion de usuarios WebApi]
*/
BEGIN
UPDATE UU.USERS_INTEGRATIONS_WEB_API
SET TOKEN_USER=@PI_TOKEN_USER,
	TOKEN_REFRESH_USER=@PI_TOKEN_REFRESH_USER
WHERE ID=@PI_ID
SELECT	ID,
			FIRST_NAME_USER,
			LAST_NAME_USER,
			NAME_USER,
			PASSWORD_USER,
			ROLE_USER,
			TOKEN_USER,
			TOKEN_REFRESH_USER  
	FROM UU.USERS_INTEGRATIONS_WEB_API
	WHERE ID=@PI_ID
END




	 